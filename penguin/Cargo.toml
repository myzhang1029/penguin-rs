[package]
name = "rusty-penguin"
version = "0.8.1"
authors = ["Zhang Maiyun <me@maiyun.me>"]
edition = "2024"
description = "A fast TCP/UDP tunnel, transported over HTTP WebSocket"
readme = "README.md"
repository = "https://github.com/myzhang1029/penguin-rs"
license = "Apache-2.0 OR GPL-3.0-or-later"
keywords = ["cli", "web", "websocket"]
categories = ["asynchronous", "command-line-utilities", "network-programming"]

[[bin]]
name = "penguin"
path = "main.rs"

[lib]
name = "rusty_penguin_lib"
path = "src/lib.rs"

[dependencies]
arc-swap = "1"
aws-lc-rs = { version = "1", optional = true }
base64 = { version = "0.22", optional = true }
bytes = "1"
clap = { version = "4", features = ["cargo", "derive", "string"] }
console-subscriber = { version = "0.4", features = ["parking_lot"], optional = true }
futures-util = { version = "0.3", default-features = false }
http = "1"
http-body-util = { version = "0.1", optional = true }
hyper = { version = "1", features = ["server", "http1", "http2"], optional = true }
hyper-rustls = { version = "0.27", features = ["http1", "http2", "logging", "tls12"], default-features = false, optional = true }
hyper-tls = { version = "0.6", features = ["alpn"], optional = true }
hyper-util = { version = "0.1", features = ["client", "client-legacy", "server", "server-auto", "tokio"], optional = true }
instant-acme = { version = "0.8", features = ["rcgen", "hyper-rustls"], default-features = false, optional = true }
log = { version = "0.4", optional = true }
nohash-hasher = { version = "0.2", optional = true }
parking_lot = "0.12"
penguin-mux = { version = "0.8", path = "../penguin-mux", features = ["tungstenite"] }
rustls = { version = "^0.23, >=0.23.18", features = ["logging", "tls12"], default-features = false, optional = true }
rustls-native-certs = { version = "0.8", optional = true }
rustls-pemfile = { version = "2", optional = true }
sha1 = { version = "0.10", optional = true }
socket2 = { version = "0.6", features = ["all"], optional = true }
thiserror = "2"
tokio = { version = "^1, >=1.23.1", features = ["fs", "io-util", "macros", "net", "parking_lot", "rt", "rt-multi-thread", "signal", "sync", "time"] }
tokio-native-tls = { version = "0.3", optional = true }
tokio-rustls = { version = "0.26", features = ["logging", "tls12"], default-features = false, optional = true }
tokio-tungstenite = { version = "0.28", features = ["handshake"], default-features = false }
tracing = "0.1"
tracing-subscriber = "^0.3, >=0.3.20"
webpki-roots = { version = "1", optional = true }

[dev-dependencies]
divan = "0.1"
rand = "0.9"
rcgen = { version = "0.14", features = ["pem"], default-features = false }
tempfile = "3"
# Hack; https://stackoverflow.com/q/73015087
rusty-penguin = { path = ".", default-features = false, features = ["dev-dependencies"] }

[target.'cfg(dhat)'.dependencies]
dhat = { version = "0.3" }

[features]
default = ["rustls-native-roots", "tests-real-internet4", "tests-udp", "penguin-binary", "acme", "ring", "tproxy"]
# Note that it does not make sense to use more than one TLS implementations
# at the same time, but there must be at least one if `penguin-binary` is
# enabled.
rustls-webpki-roots = ["dep:webpki-roots", "hyper-rustls/webpki-tokio", "__rustls"]
rustls-native-roots = ["dep:rustls-native-certs", "hyper-rustls/native-tokio", "__rustls"]
__rustls = ["dep:rustls", "dep:rustls-pemfile", "dep:tokio-rustls"]
nativetls = ["dep:tokio-native-tls", "dep:hyper-tls"]
# Use ring or aws-lc-rs (supported on fewer platforms)
ring = ["instant-acme/ring", "rustls/ring", "tokio-rustls/ring", "hyper-rustls/ring"]
aws-lc-rs = ["dep:aws-lc-rs", "instant-acme/aws-lc-rs", "rustls/aws-lc-rs", "tokio-rustls/aws-lc-rs", "hyper-rustls/aws-lc-rs"]
# Dependencies for testing
dev-dependencies = ["tracing-subscriber/env-filter", "tokio/process"]
# Allow some tests that require real internet connection
tests-real-internet4 = []
tests-real-internet6 = []
# Allow some tests that uses UDP sockets.
tests-udp = []
# Test the ACME client with a local ACME server at https://localhost:14000/dir
tests-acme-has-pebble = ["acme"]
# Set the default localhost or unspecified address to IPv6
default-is-ipv6 = []
# Export key logs to a file specified via env SSLKEYLOGFILE
rustls-keylog = ["__rustls"]
# Enabling this causes `penguin` to listen for `tokio-console` connections
tokio-console = ["dep:console-subscriber"]
# Statically remove some logging code. This breaks `tokio-console`
remove-logging = ["tracing/max_level_trace", "tracing/release_max_level_debug", "log/max_level_trace", "log/release_max_level_debug"]
# `parking_lot`'s deadlock detection in a separate thread
deadlock-detection = ["parking_lot/deadlock_detection", "penguin-mux/deadlock-detection"]
# obtaining certificate automatically using ACME protocol
acme = ["server", "dep:instant-acme", "tokio/process"]
# Use nohash-hasher for flow_id hashmaps
nohash = ["dep:nohash-hasher", "penguin-mux/nohash"]
# Enable transparent proxy support in the client
tproxy = ["dep:socket2"]
# `penguin` binary -- server
server = ["dep:base64", "dep:sha1", "dep:http-body-util", "dep:hyper", "dep:hyper-util"]
# `penguin` binary -- client
client = ["tokio/io-std"]
# `penguin` binary
# Building both is the default and recommended in most cases.
# Only building the client or server binary is supported on a best-effort basis.
# The tests require both parts.
penguin-binary = ["server", "client"]

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(dhat)', 'cfg(fuzzing)', 'cfg(loom)'] }

[package.metadata.deb]
depends = "$auto"
suggests = ["socat"]
section = "net"
priority = "optional"
assets = [
    ["target/release/penguin", "usr/bin/", "755"],
    # multiarch is automatically handled by cargo-deb
    ["../tools/penguin-v7.lua", "usr/lib/wireshark/plugins/rusty-penguin/", "644"],
    ["../tools/http01_helper", "usr/libexec/rusty-penguin/", "755"],
    ["../tools/http01_socat_helper", "usr/libexec/rusty-penguin/", "755"],
    ["../README.md", "usr/share/doc/rusty-penguin/README", "644"],
]
maintainer-scripts = "../tools"
[package.metadata.deb.systemd-units]
unit-name = "rusty-penguin"
enable = false
start = false
restart-after-upgrade = true

[package.metadata.generate-rpm]
suggests = { socat = "*" }
assets = [
    { source = "target/release/penguin", dest = "/usr/bin/", mode = "755" },
    { source = "../tools/penguin-v7.lua", dest = "/usr/lib/wireshark/plugins/rusty-penguin/", mode = "644" },
    { source = "../tools/http01_helper", dest = "/usr/libexec/rusty-penguin/", mode = "755" },
    { source = "../tools/http01_socat_helper", dest = "/usr/libexec/rusty-penguin/", mode = "755" },
    { source = "../tools/rusty-penguin.service", dest = "/usr/lib/systemd/system/", mode = "644" },
    { source = "../README.md", dest = "/usr/share/doc/rusty-penguin/README", mode = "644" },
]
