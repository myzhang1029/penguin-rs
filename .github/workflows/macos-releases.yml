name: Build macOS Releases

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build macOS Releases
    runs-on: macos-latest

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Rust Cache
      uses: Swatinem/rust-cache@v2

    - name: Install Rust with aarch64 toolchain
      run:
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --target aarch64-apple-darwin,x86_64-apple-darwin

    - name: Build release
      run: |
        cargo build --release --target x86_64-apple-darwin
        cargo build --release --target aarch64-apple-darwin
        mkdir binaries
        mv -v target/x86_64-apple-darwin/release/penguin binaries/penguin-x86_64-apple-darwin
        mv -v target/aarch64-apple-darwin/release/penguin binaries/penguin-aarch64-apple-darwin

    - name: Nightly Binaries
      uses: softprops/action-gh-release@v2
      if: github.ref == 'refs/heads/main'
      with:
        body: "Nightly binaries for commit ${{ github.sha }}. DO NOT USE the source tarball here."
        draft: false
        prerelease: true
        files: binaries/*
        name: Nightly Binaries
        tag_name: nightly
        generate_release_notes: false
        make_latest: false

    - name: Create GitHub Release for Tag
      uses: softprops/action-gh-release@v2
      if: github.ref_type == 'tag'
      with:
        body: "Release for tag ${{ github.ref }} on commit ${{ github.sha }}."
        draft: true
        files: binaries/*

    - name: Upload Nightly Binaries to ZipZen
      if: ${{ github.ref == 'refs/heads/main' }}
      env:
        ZIPZEN_API_TOKEN: ${{ secrets.ZIPZEN_API_TOKEN }}
      run: |
        curl -fsSL https://get.zipzen.dev | sh
        zipzen delete file -r nightly -p rusty-penguin penguin-x86_64-apple-darwin || true
        zipzen delete file -r nightly -p rusty-penguin penguin-aarch64-apple-darwin || true
        zipzen upload -r nightly -p rusty-penguin binaries/penguin-x86_64-apple-darwin
        zipzen upload -r nightly -p rusty-penguin binaries/penguin-aarch64-apple-darwin

    - name: Create ZipZen Release for Tag
      if: github.ref_type == 'tag'
      env:
        ZIPZEN_API_TOKEN: ${{ secrets.ZIPZEN_API_TOKEN }}
      run: |
        curl -fsSL https://get.zipzen.dev | sh
        zipzen get release ${{ github.ref_name }} -p rusty-penguin || zipzen create release ${{ github.ref_name }} -p rusty-penguin
        zipzen upload -r ${{ github.ref_name }} -p rusty-penguin binaries/penguin-x86_64-apple-darwin
        zipzen upload -r ${{ github.ref_name }} -p rusty-penguin binaries/penguin-aarch64-apple-darwin
